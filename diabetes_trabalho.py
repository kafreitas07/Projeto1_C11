# -*- coding: utf-8 -*-
"""Diabetes.trabalho.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NL3MyqGizm8zPNlPZMkaZOQX1lKYyWpI

Colunas do dataset:
age

gender

ethnicity

education_level

income_level

employment_status

smoking_status

alcohol_consumption_per_week

physical_activity_minutes_per_week

diet_score

cholesterol_total

hdl_cholesterol

ldl_cholesterol

triglycerides

glucose_fasting

glucose_postprandial

insulin_level

hba1c

diabetes_risk_score

diabetes_stage

diagnosed_diabetes

heart_rate

blood_pressure

height

weight

bmi (Índice de Massa Corporal)

waist_circumference

hip_circumference

abdominal_fat

physical_activity_level

sleep_hours_per_night
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

diabetes = pd.read_csv('diabetes_dataset.csv', delimiter = ',', dtype=str)
print(diabetes.columns)

"""1. Qual o perfil socio economico mais associado ao diabetes?"""

import pandas as pd
import matplotlib.pyplot as plt


Tipo2 = diabetes[
    (diabetes['diagnosed_diabetes'].astype(float) > 0) &
    (diabetes['diabetes_stage'] == 'Type 2')
]

# 1. Distribuição dos casos de diabetes entre as classes
distribuicao_casos = Tipo2['income_level'].value_counts(normalize=True) * 100

# 2. Prevalência em cada classe (% da classe que tem diabetes)
prevalencia_classes = []
classes_ordenadas = ['High', 'Upper-Middle', 'Middle', 'Lower-Middle', 'Low']
nomes_traduzidos = ['Alta', 'Média Alta', 'Média', 'Média Baixa', 'Baixa']

for classe in classes_ordenadas:
    total_classe = len(diabetes[diabetes['income_level'] == classe])
    diabetes_classe = len(Tipo2[Tipo2['income_level'] == classe])

    if total_classe > 0:
        prevalencia = (diabetes_classe / total_classe) * 100
    else:
        prevalencia = 0

    prevalencia_classes.append(prevalencia)

# Preparar dados para o gráfico
valores_distribuicao = []
for classe in classes_ordenadas:
    if classe in distribuicao_casos:
        valores_distribuicao.append(distribuicao_casos[classe])
    else:
        valores_distribuicao.append(0)

# Criar gráfico duplo
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))

# Gráfico 1: Distribuição dos casos
cores1 = ['#2E8B57', '#3CB371', '#20B2AA', '#4682B4', '#6A5ACD']
bars1 = ax1.barh(nomes_traduzidos, valores_distribuicao, color=cores1, alpha=0.8, edgecolor='white', linewidth=2)

for bar, valor in zip(bars1, valores_distribuicao):
    width = bar.get_width()
    ax1.text(width + 0.5, bar.get_y() + bar.get_height()/2,
             f'{valor:.1f}%', ha='left', va='center', fontsize=11, fontweight='bold')

ax1.set_xlabel('Percentual (%)', fontsize=12, fontweight='bold')
ax1.set_title('Distribuição dos Casos de Diabetes\nentre as Classes', fontsize=14, fontweight='bold')
ax1.grid(axis='x', alpha=0.3, linestyle='--')
ax1.set_xlim(0, max(valores_distribuicao) * 1.15)

# Gráfico 2: Prevalência nas classes
cores2 = ['#FF6B6B', '#FF8E53', '#FFB142', '#FFDA79', '#FFF8A5']
bars2 = ax2.barh(nomes_traduzidos, prevalencia_classes, color=cores2, alpha=0.8, edgecolor='white', linewidth=2)

for bar, valor in zip(bars2, prevalencia_classes):
    width = bar.get_width()
    ax2.text(width + 0.5, bar.get_y() + bar.get_height()/2,
             f'{valor:.1f}%', ha='left', va='center', fontsize=11, fontweight='bold')

ax2.set_xlabel('Percentual (%)', fontsize=12, fontweight='bold')
ax2.set_title('Prevalência de Diabetes\nem Cada Classe', fontsize=14, fontweight='bold')
ax2.grid(axis='x', alpha=0.3, linestyle='--')
ax2.set_xlim(0, max(prevalencia_classes) * 1.15)

# Ajustar layout
plt.suptitle('Diabetes Tipo 2: Análise por Classe Socioeconômica', fontsize=16, fontweight='bold', y=0.98)
plt.tight_layout()
plt.show()

"""2. Quais habitos de vida tem maior impacto no risco de diabetes?"""

import pandas as pd
import matplotlib.pyplot as plt

print("=== COLUNAS COM MAIOR DIFERENÇA ENTRE DIABÉTICOS E NÃO DIABÉTICOS ===\n")

# Grupos
tem_diabetes = Tipo2
nao_tem_diabetes = diabetes[diabetes['diagnosed_diabetes'] == '0']

# Lista de colunas para analisar
colunas_para_analisar = [
    'age', 'bmi', 'physical_activity_minutes_per_week', 'diet_score',
    'cholesterol_total', 'hdl_cholesterol', 'ldl_cholesterol', 'triglycerides',
    'glucose_fasting', 'glucose_postprandial', 'insulin_level', 'hba1c',
    'diabetes_risk_score', 'heart_rate', 'blood_pressure', 'height', 'weight',
    'waist_circumference', 'hip_circumference', 'abdominal_fat',
    'sleep_hours_per_night'
]

# Traduzir nomes das colunas
traducoes = {
    'age': 'Idade',
    'bmi': 'IMC',
    'physical_activity_minutes_per_week': 'Atividade Física (min/semana)',
    'diet_score': 'Qualidade da Dieta',
    'cholesterol_total': 'Colesterol Total',
    'hdl_cholesterol': 'Colesterol HDL',
    'ldl_cholesterol': 'Colesterol LDL',
    'triglycerides': 'Triglicerídeos',
    'glucose_fasting': 'Glicemia em Jejum',
    'glucose_postprandial': 'Glicemia Pós-prandial',
    'insulin_level': 'Nível de Insulina',
    'hba1c': 'Hemoglobina Glicada',
    'diabetes_risk_score': 'Pontuação de Risco de Diabetes',
    'heart_rate': 'Frequência Cardíaca',
    'blood_pressure': 'Pressão Arterial',
    'height': 'Altura',
    'weight': 'Peso',
    'waist_circumference': 'Circunferência Abdominal',
    'hip_circumference': 'Circunferência do Quadril',
    'abdominal_fat': 'Gordura Abdominal',
    'sleep_hours_per_night': 'Horas de Sono por Noite'
}

# Analisar diferenças
resultados = []
for coluna in colunas_para_analisar:
    if coluna in diabetes.columns:
        try:
            com_diabetes_num = pd.to_numeric(tem_diabetes[coluna], errors='coerce')
            sem_diabetes_num = pd.to_numeric(nao_tem_diabetes[coluna], errors='coerce')

            media_com = com_diabetes_num.mean()
            media_sem = sem_diabetes_num.mean()
            diferenca = abs(media_sem - media_com)

            nome_traduzido = traducoes.get(coluna, coluna)
            resultados.append((nome_traduzido, diferenca, media_sem, media_com, coluna))
        except:
            continue

# Ordenar pelas maiores diferenças - SEM LAMBDA
for i in range(len(resultados)):
    for j in range(i + 1, len(resultados)):
        if resultados[i][1] < resultados[j][1]:
            temp = resultados[i]
            resultados[i] = resultados[j]
            resultados[j] = temp

top_10 = resultados[:10]

# Gráfico
plt.figure(figsize=(14, 8))
colunas_nomes = [item[0] for item in top_10]
diferencas = [item[1] for item in top_10]
medias_sem = [item[2] for item in top_10]
medias_com = [item[3] for item in top_10]

x_pos = range(len(colunas_nomes))
largura = 0.35

plt.bar(x_pos, medias_sem, largura, label='SEM Diabetes', color='lightblue', alpha=0.8)
plt.bar([x + largura for x in x_pos], medias_com, largura, label='COM Diabetes', color='coral', alpha=0.8)

plt.xlabel('Variáveis Analisadas')
plt.ylabel('Valores Médios')
plt.title('TOP 10: Maiores Diferenças entre Diabéticos e Não Diabéticos', fontsize=14, fontweight='bold')
plt.xticks([x + largura/2 for x in x_pos], colunas_nomes, rotation=45, ha='right')
plt.legend()
plt.grid(True, alpha=0.3)

# Adicionar valores nas barras
for i, (sem, com) in enumerate(zip(medias_sem, medias_com)):
    plt.text(i, sem + max(medias_sem)*0.01, f'{sem:.1f}', ha='center', va='bottom', fontsize=8)
    plt.text(i + largura, com + max(medias_com)*0.01, f'{com:.1f}', ha='center', va='bottom', fontsize=8)

plt.tight_layout()
plt.show()

"""3. O modelo de risco "diabetes_risk_score" é coerente com os diagnósticos reais?"""

import pandas as pd
import matplotlib.pyplot as plt

print("=== COMPARAÇÃO SIMPLES: DIABETES TIPO 2 vs RISCO ===\n")

# Grupos
tem_diabetes = diabetes[diabetes['diabetes_stage'] == 'Type 2']
nao_tem_diabetes = diabetes[diabetes['diabetes_stage'] == 'No Diabetes']

# Converter risco para numérico
tem_diabetes['risco_num'] = pd.to_numeric(tem_diabetes['diabetes_risk_score'], errors='coerce')
nao_tem_diabetes['risco_num'] = pd.to_numeric(nao_tem_diabetes['diabetes_risk_score'], errors='coerce')

# Estatísticas básicas
risco_medio_diabeticos = tem_diabetes['risco_num'].mean()
risco_medio_nao_diabeticos = nao_tem_diabetes['risco_num'].mean()


# Gráfico simples só com as médias
plt.figure(figsize=(8, 6))

categorias = ['Sem Diabetes', 'Com Diabetes Tipo 2']
medias = [risco_medio_nao_diabeticos, risco_medio_diabeticos]
cores = ['lightblue', 'coral']

# Gráfico de barras simples
bars = plt.bar(categorias, medias, color=cores, alpha=0.8, edgecolor='black')

# Adicionar valores em cima das barras
for bar, media in zip(bars, medias):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
             f'{media:.1f}', ha='center', va='bottom', fontweight='bold', fontsize=12)

plt.ylabel('Diabetes Risk Score (Média)')
plt.title('Risco Médio: Diabéticos vs Não Diabéticos')
plt.grid(True, alpha=0.3, axis='y')

plt.show()

"""4. Relação entre o nivel de escolaridade e diabetes"""

import pandas as pd
import matplotlib.pyplot as plt

# Filtrar diabetes tipo 2
diabetes_tipo2 = diabetes[diabetes['diabetes_stage'] == 'Type 2']

# GRÁFICO 1: Distribuição percentual
distribuicao = diabetes_tipo2['education_level'].value_counts(normalize=True) * 100

# Ordenar distribuição
distribuicao_ordenada = []
for nivel, percentual in distribuicao.items():
    distribuicao_ordenada.append((nivel, percentual))

for i in range(len(distribuicao_ordenada)):
    for j in range(i + 1, len(distribuicao_ordenada)):
        if distribuicao_ordenada[i][1] < distribuicao_ordenada[j][1]:
            temp = distribuicao_ordenada[i]
            distribuicao_ordenada[i] = distribuicao_ordenada[j]
            distribuicao_ordenada[j] = temp

# GRÁFICO 2: Prevalência
prevalencias = []
for nivel in diabetes['education_level'].unique():
    total_nivel = len(diabetes[diabetes['education_level'] == nivel])
    diabeticos_nivel = len(diabetes_tipo2[diabetes_tipo2['education_level'] == nivel])

    if total_nivel > 0:
        prevalencia = (diabeticos_nivel / total_nivel) * 100
        prevalencias.append((nivel, prevalencia))

# Ordenar prevalência
for i in range(len(prevalencias)):
    for j in range(i + 1, len(prevalencias)):
        if prevalencias[i][1] < prevalencias[j][1]:
            temp = prevalencias[i]
            prevalencias[i] = prevalencias[j]
            prevalencias[j] = temp

# Criar os dois gráficos lado a lado
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))

# Gráfico 1 - Distribuição
niveis_dist = [item[0] for item in distribuicao_ordenada]
percentuais = [item[1] for item in distribuicao_ordenada]
cores1 = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']

bars1 = ax1.bar(niveis_dist, percentuais, color=cores1, alpha=0.8, edgecolor='white', linewidth=2)
ax1.set_ylabel('Distribuição (%)')
ax1.set_title('Distribuição dos Casos de Diabetes\npor Nível Educacional', fontweight='bold')
ax1.tick_params(axis='x', rotation=45)

for bar, valor in zip(bars1, percentuais):
    ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
             f'{valor:.1f}%', ha='center', va='bottom', fontweight='bold')

# Gráfico 2 - Prevalência
niveis_prev = [item[0] for item in prevalencias]
valores_prev = [item[1] for item in prevalencias]
cores2 = ['#ff9999', '#66b3ff', '#99ff99', '#ffcc99', '#c2c2f0', '#ffb3e6']

bars2 = ax2.bar(niveis_prev, valores_prev, color=cores2, alpha=0.8, edgecolor='white', linewidth=2)
ax2.set_ylabel('Prevalência (%)')
ax2.set_title('Prevalência de Diabetes\npor Nível Educacional', fontweight='bold')
ax2.tick_params(axis='x', rotation=45)

for bar, valor in zip(bars2, valores_prev):
    ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
             f'{valor:.1f}%', ha='center', va='bottom', fontweight='bold')

# Ajustar layout
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Filtrar grupos
diabetes_tipo2 = diabetes[diabetes['diabetes_stage'] == 'Type 2']
sem_diabetes = diabetes[diabetes['diabetes_stage'] == 'No Diabetes']

# Converter para numérico
diabetes_tipo2['bmi_num'] = pd.to_numeric(diabetes_tipo2['bmi'], errors='coerce')
sem_diabetes['bmi_num'] = pd.to_numeric(sem_diabetes['bmi'], errors='coerce')

diabetes_tipo2['wh_ratio_num'] = pd.to_numeric(diabetes_tipo2['waist_to_hip_ratio'], errors='coerce')
sem_diabetes['wh_ratio_num'] = pd.to_numeric(sem_diabetes['waist_to_hip_ratio'], errors='coerce')

# Calcular médias
bmi_medio_diabeticos = diabetes_tipo2['bmi_num'].mean()
bmi_medio_saudaveis = sem_diabetes['bmi_num'].mean()

wh_medio_diabeticos = diabetes_tipo2['wh_ratio_num'].mean()
wh_medio_saudaveis = sem_diabetes['wh_ratio_num'].mean()

# Gráficos
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

# Gráfico 1: BMI
categorias = ['Sem Diabetes', 'Com Diabetes']
bmi_medias = [bmi_medio_saudaveis, bmi_medio_diabeticos]

bars1 = ax1.bar(categorias, bmi_medias, color=['lightblue', 'lightcoral'], alpha=0.8, edgecolor='black')
ax1.set_ylabel('BMI')
ax1.set_title('BMI Médio por Grupo')

for bar, media in zip(bars1, bmi_medias):
    ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,
             f'{media:.1f}', ha='center', va='bottom', fontweight='bold')

# Gráfico 2: Waist-to-Hip Ratio
wh_medias = [wh_medio_saudaveis, wh_medio_diabeticos]

bars2 = ax2.bar(categorias, wh_medias, color=['lightgreen', 'orange'], alpha=0.8, edgecolor='black')
ax2.set_ylabel('Relação Cintura-Quadril')
ax2.set_title('Relação Cintura-Quadril por Grupo')

for bar, media in zip(bars2, wh_medias):
    ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
             f'{media:.2f}', ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.show()